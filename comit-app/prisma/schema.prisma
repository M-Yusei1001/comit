// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String @id @default(cuid())
  name      String 
  email     String @unique
  password  String
  accounts  Account[]
  sessions  Session[]
  products  Product[]
  order     Order[]
  item      Product_set[]

  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt 
}

model Account {
  user_id             String  
  type                String
  provider            String
  provider_account_id String
  refresh_token       String? 
  access_token        String? 
  expires_at          Int?
  token_type          String?
  scope               String?
  id_token            String?
  session_state       String?

  created_at          DateTime  @default(now())
  updatedAt           DateTime  @updatedAt

  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@id([provider, provider_account_id])
}

model Session {
  session_token String     @unique
  user_id       String
  expires       DateTime
  user          User       @relation(fields: [user_id], references: [id], onDelete: Cascade)

  created_at    DateTime   @default(now())
  updated_at     DateTime  @updatedAt
}

model VerificationToken {
  identifier  String
  token       String
  expire      DateTime

  @@id([identifier, token])
}

model Product {
  id                String  @id @default(cuid())
  user              User    @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id           String
  name              String
  price             Int
  initial_quantity  Int
  current_quantitiy Int
  is_active         Boolean @default(true)
  order             Order_product[]
  product_set       Product_set_product[]
}

model Order {
  id            String @id @default(cuid())
  order_date    DateTime @default(now())
  total_amount  Int 
  status        Boolean @default(true)
  user          User  @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id       String
  product       Order_product[]
}

model Product_set {
  id        String  @id @default(cuid())
  price     Int
  quantity  Int
  is_active Boolean @default(true)
  user      User  @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id   String
  product   Product_set_product[]
}

model Order_product {
  order       Order @relation(fields: [order_id], references: [id], onDelete: Cascade)
  order_id    String
  product     Product @relation(fields: [product_id], references: [id], onDelete: Cascade)
  product_id  String
  quantity    Int


  @@id([order_id, product_id])
}

model Product_set_product {
  product         Product   @relation(fields: [product_id], references: [id], onDelete: Cascade)
  product_id      String
  product_set     Product_set @relation(fields: [product_set_id], references: [id], onDelete: Cascade)
  product_set_id  String


  @@id([product_id, product_set_id])
}